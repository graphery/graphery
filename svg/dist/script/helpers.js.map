{
  "version": 3,
  "sources": ["src/helpers.js", "src/helpers.js", "build/helpers.js"],
  "sourcesContent": ["/**\r\n * Convert an angle from degrees to radians\r\n * @param {number} degrees\r\n * @returns {number}\r\n */\r\nexport function degrees2radians (degrees) {\r\n  return ((degrees - 90) * Math.PI) / 180.0;\r\n}\r\n\r\n/**\r\n * Return an x, y coordinates from an angular reference\r\n * @param {number} centerX\r\n * @param {number} centerY\r\n * @param {number} radius\r\n * @param {number} angleDegrees\r\n * @returns {{x : *, y : *}}\r\n */\r\nexport function polarToCartesian (centerX, centerY, radius, angleDegrees) {\r\n  const angleRadians = degrees2radians (angleDegrees);\r\n  return {\r\n    x : centerX + radius * Math.cos (angleRadians),\r\n    y : centerY + radius * Math.sin (angleRadians)\r\n  };\r\n}\r\n\r\n/**\r\n * Create an arc path\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} radius\r\n * @param {number} startAngle\r\n * @param {number} endAngle\r\n * @return {string}\r\n */\r\nexport function createArc (x, y, radius, startAngle, endAngle) {\r\n  const start        = polarToCartesian (x, y, radius, endAngle);\r\n  const end          = polarToCartesian (x, y, radius, startAngle);\r\n  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n  return `M${ start.x },${ start.y }A${ radius },${ radius },0,${ largeArcFlag },0,${ end.x },${ end.y }`;\r\n}\r\n", "/**\r\n * Convert an angle from degrees to radians\r\n * @param {number} degrees\r\n * @returns {number}\r\n */\r\nexport function degrees2radians (degrees) {\r\n  return ((degrees - 90) * Math.PI) / 180.0;\r\n}\r\n\r\n/**\r\n * Return an x, y coordinates from an angular reference\r\n * @param {number} centerX\r\n * @param {number} centerY\r\n * @param {number} radius\r\n * @param {number} angleDegrees\r\n * @returns {{x : *, y : *}}\r\n */\r\nexport function polarToCartesian (centerX, centerY, radius, angleDegrees) {\r\n  const angleRadians = degrees2radians (angleDegrees);\r\n  return {\r\n    x : centerX + radius * Math.cos (angleRadians),\r\n    y : centerY + radius * Math.sin (angleRadians)\r\n  };\r\n}\r\n\r\n/**\r\n * Create an arc path\r\n * @param {number} x\r\n * @param {number} y\r\n * @param {number} radius\r\n * @param {number} startAngle\r\n * @param {number} endAngle\r\n * @return {string}\r\n */\r\nexport function createArc (x, y, radius, startAngle, endAngle) {\r\n  const start        = polarToCartesian (x, y, radius, endAngle);\r\n  const end          = polarToCartesian (x, y, radius, startAngle);\r\n  const largeArcFlag = endAngle - startAngle <= 180 ? '0' : '1';\r\n  return `M${ start.x },${ start.y }A${ radius },${ radius },0,${ largeArcFlag },0,${ end.x },${ end.y }`;\r\n}\r\n", "import * as gySVGHelpers from '../src/helpers.js';\r\n\r\nconst global = (typeof gobalThis !== 'undefined' ? globalThis : window);\r\n\r\nObject.assign (global.gySVG, global.gySVG || {}, gySVGHelpers);"],
  "mappings": "uIAAA,+ECKO,WAA0B,GAC/B,MAAS,GAAU,IAAM,KAAK,GAAM,IAW/B,WAA2B,EAAS,EAAS,EAAQ,GAC1D,KAAM,GAAe,EAAiB,GACtC,MAAO,CACL,EAAI,EAAU,EAAS,KAAK,IAAK,GACjC,EAAI,EAAU,EAAS,KAAK,IAAK,IAa9B,WAAoB,EAAG,EAAG,EAAQ,EAAY,GACnD,KAAM,GAAe,EAAkB,EAAG,EAAG,EAAQ,GAC/C,EAAe,EAAkB,EAAG,EAAG,EAAQ,GAC/C,EAAe,EAAW,GAAc,IAAM,IAAM,IAC1D,MAAO,IAAK,EAAM,KAAO,EAAM,KAAO,KAAY,OAAc,OAAoB,EAAI,KAAO,EAAI,ICpCrG,KAAM,GAAU,MAAO,YAAc,YAAc,WAAa,OAEhE,OAAO,OAAQ,EAAO,MAAO,EAAO,OAAS,GAAI",
  "names": []
}
